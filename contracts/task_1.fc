{-
  In TON there is a limit on the size of the external message which can be sent equal to 64 kB. Sometimes it is necessary to send a larger message; it requires the onchain construction of one message from multiple smaller parts. Your task is to create such construction contract.
  In particular, a contestant needs to develop a FunC contract with two features:
    a) it has get_method "decomposite" for decomposition of large cell to parts: it accepts 1 cell (number_of_bits<1000000, number_of_cells<4000 , depth<256) and 1 address and returns tuple of cells (each of which has less than 1000 distinct cells and 40000 bits total), those cells will be transformed to slice and sent as internal message body to the contract.
    b) recv_internal should handle those internal messages from get-method described above and upon receiving last one, send initial large cell to the address (coins amount 0, mode 0). For simplicity, it is guaranteed that messages will be sent exactly in the order in which they were in decomposite output and no other messages will be sent in between.
  Note, that initial state of contract storage will be empty cell: cell with zero bits and refs.
  
  It is necessary to stress the deduplication mechanism of dag (or bag) of cells. If exactly the same cell (that means both same bits and same refs) is appeared in different part of the dag twice or multiple times it will not be stored or counted separately. All numbers in the task like 64kb, number_of_bits<1000000, number_of_cells<4000, 1000 cells and 40000 bits in output is given with account for deduplication. FunC functions compute_data_size/slice_compute_data_sizeÂ (as well as underlying opcodes CDATASIZE/SDATASIZE) returns output with account for deduplication as well.
  
-}

#include "imports/stdlib.fc";

const op::cache_fragment = "op::cache_fragment"c;
const op::send_msg = "op::send_msg"c;

() empty_cache () impure inline {
  set_data(begin_cell()
    .store_uint(0, 8)
    .store_dict(new_dict())
  .end_cell());
}

(int, cell) load_cache () inline {
  slice cs = get_data().begin_parse();
  return (cs~load_uint(8), cs~load_dict());
}

() send_msg (slice destination_address, cell big_cell) impure inline {
  cell full_msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(destination_address)
      .store_coins(0)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(big_cell)
    .end_cell();
  send_raw_message(full_msg, 64);
}

cell assemble_tree (cell cache, int idx) inline {
  (slice serialized_node, _) = cache.udict_get?(8, idx);
  int number_of_ref = serialized_node~load_uint(3);
  builder node = begin_cell();
  repeat (number_of_ref) {
    node = node.store_ref(assemble_tree(cache, serialized_node~load_uint(8)));
  }
  node = node.store_slice(serialized_node~load_bits(serialized_node.slice_bits()));
  return node.end_cell();
}

cell assemble_msg () inline {
  (_, cell cache) = load_cache();
  return assemble_tree(cache, 0);
}

() update_cache (slice append) impure {
  var (next_idx, cache_dict) = load_cache();
  cache_dict~udict_set(8, next_idx, append);
  next_idx += 1;
  set_data(
    begin_cell()
      .store_uint(next_idx, 8)
      .store_dict(cache_dict)
    .end_cell()
  );
}

;; testable
() recv_internal (slice body) {
  int op = body~load_uint(32);

  if (op == op::cache_fragment) {
    update_cache(body);
    return ();
  }

  if (op == op::send_msg) {
    send_msg(body~load_msg_addr(), assemble_msg());
    empty_cache();
    return ();
  }

  throw(100);
}

global cell cell_hash_to_index;
global int ordered_cells_length;
global cell ordered_cells;

() move_elem_to_end(int index) impure inline {
  (slice elem_to_move, int f) = ordered_cells.udict_get?(8, index);
  throw_unless(101, f);
  var (next_index, elem, f) = ordered_cells.udict_get_next?(8, index);
  do {
    ordered_cells~udict_set(8, index, elem);
    index = next_index;
    (next_index, elem, f) = ordered_cells.udict_get_next?(8, index);
  } until (~ f);
  ordered_cells~udict_set(8, index, elem_to_move);
}

() order_cells_and_remove_duplicates (cell big_cell) impure {
  int big_cell_hash = cell_hash(big_cell);
  var (index, f) = cell_hash_to_index.udict_get?(256, big_cell_hash);
  if (f) {
    int prev_index = index.preload_uint(8);
    move_elem_to_end(prev_index);
    cell_hash_to_index~udict_set(256,
      big_cell_hash,
      begin_cell()
        .store_uint(ordered_cells_length - 1, 8)
        .end_cell()
        .begin_parse()
    );
  } else {
    cell_hash_to_index~udict_set(
      256,
      big_cell_hash,
      begin_cell()
        .store_uint(ordered_cells_length, 8)
        .end_cell()
        .begin_parse()
    );
    ordered_cells~udict_set(8, ordered_cells_length, big_cell.begin_parse());
    ordered_cells_length += 1;
  }

  slice big_cell_slice = big_cell.begin_parse();
  while (~ big_cell_slice.slice_refs_empty?()) {
    order_cells_and_remove_duplicates(big_cell_slice~load_ref());
  }
}

slice get_ref_descriptor(slice cell_slice) inline {
  int number_of_refs = cell_slice.slice_refs();
  builder descriptor = begin_cell()
          .store_uint(number_of_refs, 3);
  repeat (number_of_refs) {
    (slice cell_index, _) = cell_hash_to_index.udict_get?(256, cell_hash(cell_slice~load_ref()));
    descriptor = descriptor.store_uint(cell_index~load_uint(8), 8);
  }
  return descriptor.end_cell().begin_parse();
}

;; testable
tuple decomposite (cell big_cell, slice destination_address) method_id {
  ;; initialize global variables
  cell cell_hash_to_index = new_dict();
  int ordered_cells_length = 0;
  cell ordered_cells = new_dict();

  ;; order cells and remove duplicated
  order_cells_and_remove_duplicates(big_cell);

  tuple serialized_big_cell = empty_tuple();
  int idx = 0;
  var (cell_slice, f) = ordered_cells.udict_get?(8, idx);
  while (f) {
    serialized_big_cell~tpush(begin_cell()
        .store_uint(op::cache_fragment, 32)
        .store_slice(get_ref_descriptor(cell_slice))
        .store_slice(cell_slice.preload_bits(cell_slice.slice_bits()))
      .end_cell()
    );
    idx += 1;
    (cell_slice, f) = ordered_cells.udict_get?(8, idx);
  }

  serialized_big_cell~tpush(begin_cell()
      .store_uint(op::send_msg, 32)
      .store_slice(destination_address)
    .end_cell()
  );

  return serialized_big_cell;
}
